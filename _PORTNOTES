TESTING
=======
04/01/2019
First step is getting a testbench.

DOM Conformance Test Suite provides tests in Java and ECMAScript, but not
any other languages (e.g. PHP). It does however encourage you to write an
XSLT stylesheet to create PHP (or any other target language) test code.

        This has not been done, as far as I can tell, by anybody else.
        This is strange. The CVS repository for the test suite code:

                https://dev.w3.org/cvsweb/2001/DOM-Test-Suite/

        has not been committed to for 10-15 years.

Since we're porting to PHP from ECMAScript, we will lose these tests and
have to either:

        1. re-write them all by hand or with a script
        2. write a different XSLT stylesheet for PHP

Don't know which one is going to be more efficient XD

I DECIDE TO PLAY BY THE RULES AND WRITE A NEW XSLT STYLESHEET:

        Well, it seems as though the w3c's CVS server isn't what it used to be.

                cvs -d :pserver:anonymous@dev.w3c.org:/sources/public/ checkout 2001/Dom-Test-Suite

        hangs forever. Running

                cvs -d :pserver:anonymous@dev.w3c.org:/sources/public login

        to see what is going on, prompts for a passwod ('anonymous'), then also
        hangs forever. Hmm.

        This code is in such disrepair, it's no wonder that nobody writes new
        DOM implementations. It's clear that it hasn't been happening.
        Also the dream of code generation using XSLT was also a waste. It's too
        bad, but it leaves me a bit uncertain about where to go.

        These tests are in disrepair and need to be fixed. Great.







The DOM Level 1 Specification
-----------------------------
* The DOM presents documents as a hierarchy of 'Node' objects
* Node objects may implement other, more specialized interfaces.
* Some types of nodes may have child nodes of various types.
* Other nodes are leaf nodes that cannot have any child nodes.

Node
        A node is the primary data type for the entire DOM.

        Node types and child types (W3C):
                Document
                        Element (max of 1)
                        ProcessingInstruction
                        Comment
                        DocumentType

                DocumentFragment
                        Element
                        ProcessingInstruction
                        Comment
                        Text
                        CDATASection
                        EntityReference


                EntityReference
                        Element
                        ProcessingInstruction
                        Comment
                        Text
                        CDATASection
                        EntityReference

                Element
                        Element
                        Text
                        Comment
                        ProcessingInstruction
                        CDATASection
                        EntityReference

                Attr
                        Text
                        EntityReference

                Entity
                        Element
                        ProcessingInstruction
                        Comment
                        Text
                        CDATASection
                        EntityReference

                                                v--------- leaf node types
                DocumentType
                        -- no children --

                ProcessingInstruction
                        -- no children --

                Text
                        -- no children --

                CDATASection
                        -- no children --

                Comment
                        -- no children --

                Notation
                        -- no children --



NodeList
        The DOM specifies a NodeList interface to handle ordered lists
        of Nodes, such as the children of a Node, or the elements returned
        by the Element.getElementsByTagName method.

NamedNodeMap
        Another interface, to handle unordered sets of nodes referenced by
        their name attribute, such as the attributes of an Element.

NOTE
        NodeList and NamedNodeMap are "live" -- changes in the underlying
        document structure are reflected in them.


-------------------------------------------------------------------

How to build the objects in PHP?


The INTERFACES (indent indicates inheritance) are:
        Document              (Node)
        DocumentFragment      (Node)
        Attr                  (Node)
        DocumentType          (LeafNode)
        ProcessingInstruction (LeafNode)
        DocumentType          (ChildNode)
        Element               (ChildNode, NonDocumentTypeChildNode)
        Text                  (ChildNode, NonDocumentTypeChildNode, CharacterData, LeafNode)
        Comment               (ChildNode, NonDocumentTypeChildNode, CharacterData, LeafNode)
        CDATASection          (ChildNode, NonDocumentTypeChildNode, CharacterData, LeafNode)


Should we 'implements' various interfaces? Use abstract classes with the
inheritence looking like

Node -- ChildNode -- NonDocumentTypeChildNode
        CharacterData
        LeafNode

Yeah, hmm


Node

ChildNode
        (methods for node objects that can have a parent)
        Element
        DocumentType
        CharacterData


NonDocumentTypeChildNode
        (methods for node objects that can have a parent, but not DocumentType)
        Element
        CharacterData
